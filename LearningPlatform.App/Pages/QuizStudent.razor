@page "/quiz/{quizId:guid}"
@using LearningPlatform.App.ViewModels
@using LearningPlatform.App.Contracts
@inject IQuizService QuizService
@inject IQuestionService QuestionService
@inject NavigationManager NavigationManager

<div class="quiz-container">
    <h1>@quizTitle</h1>

    @if (questions != null && questions.Any())
    {
        <EditForm Model="this" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @foreach (var question in questions)
            {
                <div class="question-block">
                    <label class="question-text">@question.Text</label>
                    <InputRadioGroup @bind-Value="question.UserAnswer">
                        <div class="answer-options">
                            @foreach (var answer in question.ShuffledAnswers)
                            {
                                <div class="answer-option">
                                    <InputRadio Value="@answer" id="@($"answer-{question.Id}-{answer}")" />
                                    <label for="@($"answer-{question.Id}-{answer}")">@answer</label>
                                </div>
                            }
                        </div>
                    </InputRadioGroup>
                </div>
            }

            <button type="submit" class="btn-submit">Trimite</button>
        </EditForm>

        @if (resultMessage != null)
        {
            <div class="result-message">@resultMessage</div>
        }

        <button @onclick="NavigateBackToCourse" class="btn-back">Înapoi la curs</button>
    }
    else
    {
        <p>Loading questions...</p>
    }
</div>

@code {
    [Parameter] public Guid quizId { get; set; }
    private List<QuestionViewModel> questions = new List<QuestionViewModel>();
    private string resultMessage;
    private string quizTitle;
    private Guid courseId;

    protected override async Task OnInitializedAsync()
    {
        var quiz = await QuizService.GetQuizById(quizId);
        if (quiz != null)
        {
            quizTitle = quiz.Title;
            courseId = quiz.CourseId;
            questions = await QuestionService.GetQuestionsByQuizId(quizId);
            foreach (var question in questions)
            {
                question.ShuffleAnswers();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        int correctCount = 0;
        foreach (var question in questions)
        {
            if (question.UserAnswer == question.CorrectAnswer)
            {
                correctCount++;
            }
        }
        resultMessage = $"You answered {correctCount} out of {questions.Count} questions correctly.";
    }

    private void NavigateBackToCourse()
    {
        NavigationManager.NavigateTo($"/student/course/{courseId}");
    }
}

<style>
    body {
        font-family: 'Open Sans', sans-serif;
        background-color: #f4f4f9;
        margin: 0;
        padding: 0;
    }

    .quiz-container {
        max-width: 1100px;
        margin: 40px auto;
        padding: 30px;
        background-color: #ffffff;
        border-radius: 15px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        font-family: 'Open Sans', sans-serif;
    }

    h1 {
        text-align: center;
        color: #1e3a8a;
        font-size: 2.5em;
        margin-bottom: 20px;
        font-family: 'Lora', serif;
    }

    .question-block {
        margin-bottom: 30px;
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .question-text {
        display: block;
        font-size: 1.5em;
        color: #333;
        margin-bottom: 10px;
    }

    .answer-options {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .answer-option {
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        transition: border-color 0.3s;
    }

        .answer-option:hover {
            border-color: #1e3a8a;
        }

        .answer-option label {
            margin-left: 5px;
            font-size: 1.2em;
        }

    .btn-submit, .btn-back {
        display: block;
        width: 100%;
        padding: 15px;
        border: none;
        border-radius: 25px;
        background-color: #1e3a8a;
        color: white;
        cursor: pointer;
        font-size: 1.2em;
        transition: background-color 0.3s;
        margin-top: 20px;
        text-align: center;
    }

        .btn-submit:hover, .btn-back:hover {
            background-color: #0056b3;
        }

    .result-message {
        margin-top: 20px;
        font-size: 1.2em;
        font-weight: bold;
        color: #1e3a8a;
        text-align: center;
    }
</style>
