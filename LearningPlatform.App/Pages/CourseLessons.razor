@page "/course/{courseId:guid}/lessons"
@using LearningPlatform.App.Contracts
@using LearningPlatform.App.ViewModels
@inject ILessonService LessonService
@inject NavigationManager NavigationManager
@inject IAzureDataService BlobHttpClientService

<div class="container">
    <h1>Lecții disponibile</h1>
    <div class="button-container">
        <button class="btn-back-to-courses" @onclick="NavigateBackToCourses">Înapoi la cursuri</button>
        <button class="btn-create-lesson" @onclick="ShowCreateLessonForm">Crează o lecție</button>
    </div>
    @if (showCreateLessonForm)
    {
        <EditForm Model="newLesson" OnValidSubmit="CreateLesson">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="title">Title:</label>
                <InputText id="title" class="form-control" @bind-Value="newLesson.Title" />
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <InputTextArea id="description" class="form-control" @bind-Value="newLesson.Description" />
            </div>
            <div class="form-group">
                <label for="video">Upload Video:</label>
                <InputFile OnChange="HandleVideoSelected" class="custom-file-input" />
            </div>
            <div class="form-group">
                <label for="thumbnail">Upload Thumbnail:</label>
                <InputFile OnChange="HandleThumbnailSelected" class="custom-file-input" />
            </div>
            <div class="form-group">
                <label for="order">Order:</label>
                <InputNumber id="order" class="form-control" @bind-Value="newLesson.Order" />
            </div>
            <div class="form-group">
                <label for="content">Content:</label>
                <InputTextArea id="content" class="form-control" @bind-Value="newLesson.Content" />
            </div>
            <div class="button-container">
                <button type="submit" class="btn-submit">Creaza Lecție</button>
                <button type="button" class="btn-cancel" @onclick="CancelCreateLesson">Cancel</button>
                <button type="button" class="btn-verify-upload @(isVerified ? "verified" : "")" @onclick="VerifyUploads">Verifica Upload-urile</button>
            </div>
        </EditForm>
    }
    else
    {
        @if (lessons != null)
        {
            <div class="lessons-container">
                @foreach (var lesson in lessons.OrderBy(l => l.Order))
                {
                    <div class="lesson-card">
                        <h2>@lesson.Title</h2>
                        <img src="@(lesson.Thumbnail)" alt="Thumbnail" class="lesson-thumbnail" onerror="console.log('Error loading image:', this.src);" />
                        <div class="btn-container">
                            <button @onclick="() => NavigateToLesson(lesson.LessonId)" class="btn-view-details">Vezi detalii</button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Loading lessons...</p>
        }
    }
</div>

<style>
    .container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 20px;
        font-family: 'Roboto', sans-serif;
        text-align: center;
    }

    h1 {
        color: #1e3a8a;
        margin-bottom: 20px;
    }

    .button-container {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 20px;
    }

    .btn-back-to-courses, .btn-create-lesson, .btn-submit, .btn-cancel, .btn-verify-upload {
        padding: 15px 30px;
        background-color: #1e3a8a;
        color: white;
        border: none;
        border-radius: 30px;
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 18px;
        position: relative;
        overflow: hidden;
    }

        .btn-back-to-courses:hover, .btn-create-lesson:hover, .btn-submit:hover, .btn-cancel:hover, .btn-verify-upload:hover {
            background-color: #0056b3;
        }

        .btn-cancel:hover {
            background-color: #dc3545;
        }

        .btn-verify-upload.verified {
            background-color: #28a745;
        }

    .lessons-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        margin-top: 20px;
    }

    .lesson-card {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        width: calc(33.333% - 20px);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        transition: transform 0.3s;
        text-align: left;
        padding: 15px;
        border: 1px solid #1e3a8a;
        position: relative;
    }

        .lesson-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 6px 30px rgba(0, 0, 0, 0.15);
        }

        .lesson-card h2 {
            font-size: 20px;
            margin-bottom: 10px;
            color: #1e3a8a;
        }

    .btn-container {
        margin-top: auto;
        display: flex;
        justify-content: center;
    }

    .btn-view-details {
        padding: 15px 30px;
        background-color: #1e3a8a;
        color: white;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 18px;
        position: relative;
        overflow: hidden;
    }

        .btn-view-details:hover {
            background-color: #0056b3;
        }

    .lesson-thumbnail {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .form-group {
        margin-bottom: 20px;
        text-align: left;
    }

        .form-group label {
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
            color: #1e3a8a;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: #1e3a8a;
            outline: none;
        }

    .custom-file-input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        transition: border-color 0.3s;
    }

        .custom-file-input:focus {
            border-color: #1e3a8a;
            outline: none;
        }
</style>

@code {
    [Parameter] public Guid courseId { get; set; }
    private List<LessonDataViewModel> lessons;
    private CreateLessonViewModel newLesson;
    private IBrowserFile selectedVideoFile;
    private IBrowserFile selectedThumbnailFile;
    private string VideoUri;
    private string ThumbnailUri;
    private bool showCreateLessonForm = false;
    private bool isVerified = false;

    protected override async Task OnInitializedAsync()
    {
        newLesson = new CreateLessonViewModel { CourseId = courseId };
        try
        {
            lessons = await LessonService.GetLessonsByCourseId(courseId);
            Console.WriteLine("Lessons loaded: " + lessons.Count);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lessons: {ex.Message}");
        }
    }

    private void ShowCreateLessonForm()
    {
        showCreateLessonForm = true;
    }

    private void CancelCreateLesson()
    {
        showCreateLessonForm = false;
        newLesson = new CreateLessonViewModel { CourseId = courseId };
        isVerified = false;
    }

    private async Task CreateLesson()
    {
        try
        {
            if (selectedVideoFile != null)
            {
                var videoUploadResult = await BlobHttpClientService.UploadFiles(new List<IBrowserFile> { selectedVideoFile });
                VideoUri = videoUploadResult[0].Uri;
            }

            if (selectedThumbnailFile != null)
            {
                var thumbnailUploadResult = await BlobHttpClientService.UploadFiles(new List<IBrowserFile> { selectedThumbnailFile });
                ThumbnailUri = thumbnailUploadResult[0].Uri;
            }

            newLesson.LessonId = Guid.NewGuid();
            newLesson.VideoUrl = VideoUri;
            newLesson.Thumbnail = ThumbnailUri;
            var createdLesson = await LessonService.CreateLessonAsync(newLesson);
            var createdLessonData = new LessonDataViewModel
                {
                    LessonId = createdLesson.Value.LessonId,
                    Title = createdLesson.Value.Title,
                    Description = createdLesson.Value.Description,
                    VideoUrl = createdLesson.Value.VideoUrl,
                    Content = createdLesson.Value.Content,
                    Order = createdLesson.Value.Order,
                    Thumbnail = createdLesson.Value.Thumbnail
                };
            lessons.Add(createdLessonData);
            showCreateLessonForm = false;
            newLesson = new CreateLessonViewModel { CourseId = courseId };
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating lesson: {ex.Message}");
        }
    }

    private void HandleVideoSelected(InputFileChangeEventArgs e)
    {
        selectedVideoFile = e.File;
    }

    private void HandleThumbnailSelected(InputFileChangeEventArgs e)
    {
        selectedThumbnailFile = e.File;
    }

    private async Task VerifyUploads()
    {
        if (selectedThumbnailFile != null)
        {
            var thumbnailUploadResult = await BlobHttpClientService.UploadFiles(new List<IBrowserFile> { selectedThumbnailFile });
            Console.WriteLine("Thumbnail upload verified: " + thumbnailUploadResult[0].Uri);
            ThumbnailUri = thumbnailUploadResult[0].Uri;
        }
        else
        {
            Console.WriteLine("No thumbnail file selected to verify.");
        }

        if (selectedVideoFile != null)
        {
            var videoUploadResult = await BlobHttpClientService.UploadFiles(new List<IBrowserFile> { selectedVideoFile });
            Console.WriteLine("Video upload verified: " + videoUploadResult[0].Uri);
            VideoUri = videoUploadResult[0].Uri;
        }
        else
        {
            Console.WriteLine("No video file selected to verify.");
        }

        isVerified = true;
    }

    private void NavigateToLesson(Guid lessonId)
    {
        NavigationManager.NavigateTo($"/lesson/{lessonId}");
    }

    private void NavigateBackToCourses()
    {
        NavigationManager.NavigateTo("/teachercourses");
    }
}
